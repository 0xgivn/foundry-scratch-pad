
// to compile run: huffc src/AssemblyFVCourse/horse-storeV1/HorseStore.huff -b 

// You can run bytecode here - https://www.evm.codes/playground?fork=cancun
// Be careful to put the executable code and not the contract creation part
// --bin-runtime - gives just the runtime code!

#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns()

#define constant NUMBER_OF_HORSES_SLOT = FREE_STORAGE_POINTER() // assigns the next free storage slot to the constant

// send calldata -> function dispatch -> function
#define macro MAIN() = takes(0) returns(0) {
  0x00         // [0] - from what offset to read the calldata
  calldataload // [calldata] - push all of the calldata on the stack
  // How to get the function selector from the calldata?
  0xe0        // [0xe0, calldata] - push the number of bits we want to remove from calldata
  shr         // [funcSelector]

  // Jump to function bytecode associated with the selector
  // if f_selector == updateHorseNumber(cdfead2e) -> jump there
  // if f_selector == readNumberOfHorses(e026c017) -> jump there
  
  dup1                          // [funcSelector, funcSelector]
  __FUNC_SIG(updateHorseNumber) // [0xcdfead2e, funcSelector, funcSelector]
  eq         // [1_if_true_else_0, funcSelector] if equal, push 1, else push 0
  updateJump // [updateHorseNumberProgramCounter, true/false, funcSelector]
  jumpi      // [funcSelector] if we don't jump we still have funcSelector we duplicated on L21

  __FUNC_SIG(readNumberOfHorses) // [0xe026c017, funcSelector]
  eq         // [true_if_selector_matches]
  readJump   // [readNumberOfHorsesProgramCounter, true/false]
  jumpi      // []

  0x00 0x00  // [0x00, 0x00] revert arguments
  revert // if we don't match any function selector, revert

  updateJump:
    SET_NUMBER_OF_HORSES()
  readJump:
    GET_NUMBER_OF_HORSES()
}

// Example calldata: 0xcdfead2e0000000000000000000000000000000000000000000000000000000000000005
#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0) {
  // 1. Get value to store from calldata
  0x04 // [0x04] - offset to read the value from calldata (skip func selector)
  calldataload // [input]
  // 2. Give a storage slot -  NUMBER_OF_HORSES_SLOT
  [NUMBER_OF_HORSES_SLOT] // [slot_key, input] - pushes value at slot on the stack
  // 3. call sstore opcode
  sstore // []
  stop
}

// Example calldata: 0xe026c017
#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0) {
  [NUMBER_OF_HORSES_SLOT] // [slot_key]
  sload  // [value]
  0x00   // [0x00, value]
  mstore // []         // Memory: [value]

  0x20 0x00 // [0x20, 0x00] - size and offset - arguments for return
  return 
}
